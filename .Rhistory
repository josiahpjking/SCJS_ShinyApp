?NS
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
?NS
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
df %>% filter(police_div=="National Average") %>% mutate(
nat_avgp = percentage,
nat_avgci = ci
) %>% select(variable,year,nat_avgp,nat_avgci) -> nat_avg
#join and do proportion testing for all other data.
left_join(df, nat_avg) %>%
mutate(
p_diff=percentage-nat_avgp,
p_diff2=ifelse(reverse_coded==1,0-p_diff,p_diff),
p_direction=ifelse(p_diff2==0,"No difference",
ifelse(p_diff2>0,"More Positive","Less Positive")),
c=sqrt((ci^2)+(nat_avgci^2)),
change=ifelse(((abs(p_diff)/100)>c)==TRUE & p_direction=="More Positive","More Positive",
ifelse(((abs(p_diff)/100)>c)==TRUE & p_direction=="Less Positive","Less Positive","No difference")),
wrapped_name = sapply(name_trunc, FUN = function(x) {paste(strwrap(x, width = 35), collapse = "<br>")}),
#text for current_plot
my_text = paste0("<b>",police_div,"</b><br>",year,"<br>",wrapped_name,"<br><b>",round(percentage, digits=1),"</b>% +/-",round(ci*100, digits=1),", N = ",samplesize,"<br><i><b>Click to see this division relative<br>to the national average over time.<i></b>"),
#text for trendplot
my_text2 = paste0("<b>",year,"</b><br>",police_div,"<br>",wrapped_name,"<br><b>",round(percentage, digits=1),"</b>% +/-",round(ci*100, digits=1),", N = ",samplesize,"<br><i><b>Click to see this year<br>for all divisions.<i></b>"),
#truncated text for multi questions
my_text3 = paste0(wrapped_name,"<br><b>",round(percentage, digits=1),"</b>% +/-",round(ci*100, digits=1),", N = ",samplesize),
#text for nat average lines
natav_text = paste0("<b>",police_div,"</b><br>",year,"<br>",wrapped_name,"<br><b>",round(percentage, digits=1),"</b>% +/-",round(ci*100, digits=1),", N = ",samplesize),
#wrapped pdiv name
wrappedpolice_div=sapply(gsub(" Division","",police_div), FUN = function(x) {paste(strwrap(x, width = 15), collapse = "<br>")})
) %>% select(-c(p_direction,c)) -> overview_data
police_div %in% pdivis[4],
year %in% years[1],
variable %in% all_vars[[names(all_vars)[2]]]) %>%
select(variable,p_diff) -> yopts
overview_data %>% filter(
police_div %in% pdivis[4],
year %in% years[1],
variable %in% all_vars[[names(all_vars)[2]]]) %>%
select(variable,p_diff) -> yopts
yopts
overview_data %>% filter(
police_div %in% pdivis[4],
year %in% years[1],
variable %in% all_vars[[names(all_vars)[2]]])
police_div %in% pdivis[4],
year %in% years[1],
variable %in% all_vars[[names(all_vars)[2]]]) %>%
select(variable,p_diff) -> yopts
yopts
yopts[!is.na(yopts$p_diff)]
yopts[!is.na(yopts$p_diff),]
newy = 5.87
print(findInterval(newy, yopts$p_diff))
yopts = yopts[!is.na(yopts$p_diff),]
print(findInterval(newy, yopts$p_diff))
yopts$p_diff
print(findInterval(newy, c(yopts$p_diff)))
yopts %>% data.frame(.) ->yopts2
newy =
print(findInterval(newy, yopts2$p_diff))
newy = 5.87
print(findInterval(newy, yopts2$p_diff))
summary(yopts$p_diff)
class(yopts$p_diff)
print(findInterval(newy, yopts$p_diff))
findInterval(newy, yopts$p_diff)
yopts$p_diff
findInterval(newy, c(0.78,10.28,8.62))
?findInterval
police_div %in% pdivis[4],
year %in% years[1],
variable %in% all_vars[[names(all_vars)[2]]]) %>%
select(variable,p_diff) -> yopts
police_div %in% pdivis[4],
year %in% years[1],
variable %in% all_vars[[names(all_vars)[2]]]) %>%
select(variable,p_diff) %>% arrange(p_diff) -> yopts
yopts
overview_data %>% filter(
police_div %in% pdivis[4],
year %in% years[1],
variable %in% all_vars[[names(all_vars)[2]]]) %>%
select(variable,p_diff) %>% arrange(p_diff) -> yopts
yopts
newy = 5.87
yopts$p_diff
findInterval(newy, c(0.78,10.28,8.62))
findInterval(newy, c(0.78,10.28,18.62))
findInterval(newy, yopts$p_diff)
shiny::runApp(appDir="./app/")
yopts
yopts$variable[2]
yopts$variable[3]
rm(yopts,newy,yopts2)
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
findInterval(0.782, c(0.782066, 10.3, 12.34))
findInterval(0.782, c(0.01,0.782066, 10.3, 12.34))
shiny::runApp(appDir="./app/")
findInterval(10.28, c(0,782,8.6,10.3))
findInterval(10.28, c(0.782,8.6,10.3))
findInterval(10.28, c(0.782,8.6,10.2))
findInterval(10.28, c(0.782,8.6,10.2), all.inside=T)
findInterval(10.28, c(0.782,8.6,10.3), all.inside=T)
findInterval(10.28, c(0.782,8.6,10.8), all.inside=T)
findInterval(10.28, c(0.782,8.6), all.inside=T)
shiny::runApp(appDir="./app/")
findInterval(1, c(0.782,8.6,10.8), all.inside=T)
findInterval(1, c(0.782,8.6,10.8))
findInterval(1, c(0.782,8.6,10.8),left.open=TRUE)
findInterval(0.2, c(0.782,8.6,10.8),left.open=TRUE)
findInterval(0.2, c(0.782,8.6,10.8),left.open=TRUE, rightmost.closed = TRUE)
findInterval(10.2, c(0.782,8.6,10.8),left.open=TRUE, rightmost.closed = TRUE)
findInterval(10.9, c(0.782,8.6,10.8),left.open=TRUE, rightmost.closed = TRUE)
findInterval(10.9, c(0.782,8.6,10.8),left.open=TRUE, rightmost.closed = TRUE, all.inside=T)
findInterval(9, c(0.782,8.6,10.8),left.open=TRUE, rightmost.closed = TRUE, all.inside=T)
findInterval(9, c(0.782,8.6,10.8), rightmost.closed = TRUE, all.inside=T)
shiny::runApp(appDir="./app/")
min(abs(c(0.782,8.6,10.8)-9))
which(min(abs(c(0.782,8.6,10.8)-9)))
which.min(abs(c(0.782,8.6,10.8)-9)))
which.min(abs(c(0.782,8.6,10.8)-9))
which.min(abs(c(0.782,8.6,10.8)-2))
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
load("app/.RData")
####################### RUN THE APP ############################
#load("app/.RData")
shiny::runApp(appDir="./app/")
####################### RUN THE APP ############################
#load("app/.RData")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
?pass
?derp
?derp
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
?event_data
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
n<-0
shiny::runApp(appDir="./app/")
4%2
4%$2
4%%2
4%%3
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
?summarise_at
shiny::runApp(appDir="./app/")
####################### RUN THE APP ############################
#load("app/.RData")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
700+320
1280-320
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
?navbarMenu
?navbarPage
?navbarPage
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
fluidPage(
#get CSS style stuff.
includeCSS("./www/stuff.css"),
includeCSS("./www/bootstrap-theme.min.css"),
#main body of app. It's a navbar, so menu at top, different tabs.
#each tab is sourced from a separate file to help the layout be a little easier to get to grips with.
navbarPage(title="",
id="main",
position="fixed-top",
collapsible=TRUE,
header = div(class="header-back",
tags$h1(class="head-control",
a(target="_blank",href="http://www.gov.scot/Topics/Statistics/Browse/Crime-Justice/crime-and-justice-survey","Scottish Crime & Justice Survey"),
tags$img(src="scotgov.png",width=200,align="left")
)),
#########
#HOME
#########
tabPanel("Home",icon = icon('home',lib="glyphicon"),
source("source/ui_home.R")
),
##########
#Division Breakdowns (main_divisions)
##########
tabPanel("Breakdown by Police Divisions", value="main_divisions",
source("source/ui_overview.R")
),
##########
#COMPARISON TOOL (main_compare)
##########
tabPanel("Comparison Tool", value="main_compare", icon = icon('bar-chart'),
source("source/ui_comparison.R")
),
##########
#TRENDS OVER TIME (main_trends)
##########
tabPanel("Visualise Trends", value="main_trends", icon = icon('line-chart'),
source("source/ui_trends.R")
),
##########
#TABLES (main_tables)
##########
tabPanel("Tables", value="main_tables", icon = icon('download-alt', lib='glyphicon'),
source("source/ui_tables.R")
),
##########
#HELP & INFO (main_help)
##########
tabPanel("Help & Information", value="main_help", icon=icon('info-sign',lib="glyphicon"),
source("source/ui_help.R")
)
)
)
fluidPage(
#get CSS style stuff.
includeCSS("./www/stuff.css"),
includeCSS("./www/bootstrap-theme.min.css"),
#main body of app. It's a navbar, so menu at top, different tabs.
#each tab is sourced from a separate file to help the layout be a little easier to get to grips with.
navbarPage(title="",
id="main",
position="fixed-top",
collapsible=TRUE,
header = div(class="header-back",
tags$h1(class="head-control",
a(target="_blank",href="http://www.gov.scot/Topics/Statistics/Browse/Crime-Justice/crime-and-justice-survey","Scottish Crime & Justice Survey"),
tags$img(src="scotgov.png",width=200,align="left")
)),
#########
#HOME
#########
tabPanel("Home",icon = icon('home',lib="glyphicon"),
source("source/ui_home.R")
),
##########
#Division Breakdowns (main_divisions)
##########
tabPanel("Breakdown by Police Divisions", value="main_divisions",
source("source/ui_overview.R")
),
##########
#COMPARISON TOOL (main_compare)
##########
tabPanel("Comparison Tool", value="main_compare", icon = icon('bar-chart'),
source("source/ui_comparison.R")
),
##########
#TRENDS OVER TIME (main_trends)
##########
tabPanel("Visualise Trends", value="main_trends", icon = icon('line-chart'),
print(source("source/ui_trends.R"))
),
##########
#TABLES (main_tables)
##########
tabPanel("Tables", value="main_tables", icon = icon('download-alt', lib='glyphicon'),
source("source/ui_tables.R")
),
##########
#HELP & INFO (main_help)
##########
tabPanel("Help & Information", value="main_help", icon=icon('info-sign',lib="glyphicon"),
source("source/ui_help.R")
)
)
)
fluidPage(
#get CSS style stuff.
includeCSS("./www/stuff.css"),
includeCSS("./www/bootstrap-theme.min.css"),
#main body of app. It's a navbar, so menu at top, different tabs.
#each tab is sourced from a separate file to help the layout be a little easier to get to grips with.
navbarPage(title="",
id="main",
position="fixed-top",
collapsible=TRUE,
header = div(class="header-back",
tags$h1(class="head-control",
a(target="_blank",href="http://www.gov.scot/Topics/Statistics/Browse/Crime-Justice/crime-and-justice-survey","Scottish Crime & Justice Survey"),
tags$img(src="scotgov.png",width=200,align="left")
)),
#########
#HOME
#########
tabPanel("Home",icon = icon('home',lib="glyphicon"),
source("source/ui_home.R")
),
##########
#Division Breakdowns (main_divisions)
##########
tabPanel("Breakdown by Police Divisions", value="main_divisions",
source("source/ui_overview.R")
),
##########
#COMPARISON TOOL (main_compare)
##########
tabPanel("Comparison Tool", value="main_compare", icon = icon('bar-chart'),
source("source/ui_comparison.R")
),
##########
#TRENDS OVER TIME (main_trends)
##########
tabPanel("Visualise Trends", value="main_trends", icon = icon('line-chart'),
print(source("source/ui_trends.R"))
),
##########
#TABLES (main_tables)
##########
tabPanel("Tables", value="main_tables", icon = icon('download-alt', lib='glyphicon'),
source("source/ui_tables.R")
),
##########
#HELP & INFO (main_help)
##########
tabPanel("Help & Information", value="main_help", icon=icon('info-sign',lib="glyphicon"),
source("source/ui_help.R")
)
)
)
source("source/ui_trends.R")
source("source/ui_trends.R")
shiny::runApp(appDir="./app/")
source("source/ui_home.R")
getwd()
source("app/source/ui_home.R")
print(source("app/source/ui_home.R"))
source("app/source/ui_home.R")
shiny::runApp(appDir="./app/")
homepage<-source("app/source/ui_home.R")
View(homepage)
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
homepage<-source("app/source/ui_home.R")
shiny::runApp(appDir="./app/")
overview_page <-
sidebarLayout(
sidebarPanel(
conditionalPanel(
condition="input.ovplotting == 'breakdown'",
htmlOutput('overview_1')
),
conditionalPanel(
condition="input.ovplotting == 'trends'",
htmlOutput('overview_2')
),
selectizeInput("ov_var",label="Choose a section of the survey",choices=list("National Indicators"=all_vars[[1]],"Survey Sections"=names(all_vars)),multiple=F,selected=NULL),
conditionalPanel(
condition="input.ovplotting == 'breakdown'",
selectizeInput("ov_year",label="Choose Year",choices=years,selected=years[length(years)],multiple=F)
),
conditionalPanel(
condition="input.ovplotting == 'trends'",
selectizeInput("ov_pdiv",label="Choose Division",choices=pdivis,selected=pdivis[12],multiple=F)
),
uiOutput("variable_info_ov")
),
mainPanel(
tabsetPanel(id="ovplotting",selected="breakdown",
tabPanel(title="Single Year",value="breakdown",
div(class="plot-container",
tags$img(src="spinner.gif", id="loading-spinner"),
plotlyOutput("ov_currentplot", height = "auto",width='100%')
),
div(class="plot-below",tags$p("Click on the results of a division to see how it has performed over time."))
),
tabPanel(title="Divisions Over Time",value="trends",
uiOutput("ov_var2"),
div(class="plot-container",
tags$img(src="spinner.gif", id="loading-spinner"),
plotlyOutput("ov_trendplot", height = "100%",width='100%')
),
div(class="plot-below",tags$p("Click on the results of a year to see all divisions for that year."))
),
div(class="plot-below",checkboxInput("showleg",label = "Show Legend",value=FALSE))
)
)
)
source("source/ui_overview.R")
source("source/ui_overview.R")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
