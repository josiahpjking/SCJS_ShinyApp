colors=overview_cols,
type="scatter",mode="markers",
marker = list(symbol=24, size = 15)) %>%
add_trace(type="scatter",mode="lines",
color=~wrapped_name, opacity=0.2,
marker=NULL, line=list(color=~wrapped_name,dash="dot")) %>%
layout(#title=paste0("<b>",input$ov_pdiv,"</b><br>",input$ov_var),
margin=list(t=70),
#showlegend=input$showleg,
legend = list(x=1.1,y=1.1),
yaxis=list(title="Percentage",ticksuffix = "%"),
xaxis=list(title="Year"),
#height = input$plotHeight,
autosize=TRUE) %>% config(modeBarButtonsToRemove = modebar_remove)
iov_pdiv=pdivis[4]
overview_data %>%
filter(variable %in% all_vars[[iov_var]]) %>%
filter(police_div %in% iov_pdiv) %>%
plot_ly(.,
inherit=F,
x=~year,
y=~percentage,
color=~change,
text=~my_text2,
hoverinfo="text",
colors=overview_cols,
type="scatter",mode="markers",
marker = list(symbol=24, size = 15)) %>%
add_trace(type="scatter",mode="lines",
color=~wrapped_name, opacity=0.2,
marker=NULL, line=list(color=~wrapped_name,dash="dot")) %>%
layout(#title=paste0("<b>",input$ov_pdiv,"</b><br>",input$ov_var),
margin=list(t=70),
#showlegend=input$showleg,
legend = list(x=1.1,y=1.1),
yaxis=list(title="Percentage",ticksuffix = "%"),
xaxis=list(title="Year"),
#height = input$plotHeight,
autosize=TRUE) %>% config(modeBarButtonsToRemove = modebar_remove)
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
pd_latlon$zoom <- sample(5:8,size=length(pd_latlon$PDivName,replace=T))
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
pd_latlon$zoom
sample(8:10,size=length(pd_latlon$PDivName), replace=T)
shiny::runApp(appDir="./app/")
pd_latlon$PDivName
pd_latlon$zoom <- sample(6,size=length(pd_latlon$PDivName), replace=T)
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
pd_latlon$zoom
pd_latlon$zoom <- sample(8:10,size=length(pd_latlon$PDivName), replace=T)
pd_latlon$zoom
shiny::runApp(appDir="./app/")
pd_latlon$zoom[[6]]
pd_latlon$zoom[6]
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
names(all_vars)
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
source('loader.R')
shiny::runApp(appDir="./app/")
source('loader.R')
shiny::runApp(appDir="./app/")
?source
?source.url
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
source('loader.R')
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
?tabPanel
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
all_vars[[c(names(all_vars)[c(1,2)])]]
c(names(all_vars)[c(1,2)])
c(names(all_vars)[c(1,2)])
all_vars[[which(names(all_vars)%in%c(names(all_vars)[c(1,2)]))]]
which(names(all_vars) %in%c(names(all_vars)[c(1,2)]))
all_vars[[1,2]]
all_vars[[c(1,2)]]
all_vars[c(1,2)]
all_vars[c(names(all_vars)[c(1,2)])]
shiny::runApp(appDir="./app/")
c(names(all_vars)[c(1,2)])
all_vars[c(names(all_vars)[c(1,2)])]
all_vars %in% c(names(all_vars)[c(1,2)])
all_vars %in% all_vars[c(names(all_vars)[c(1,2)])]
all_vars %in% all_vars[[c(names(all_vars)[c(1,2)])]]
all_vars[c(1,2)]
unlist(all_vars[c(1,2)])
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
source('loader.R')
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
all_vars[[1]]
which(all_vars[[1]]=="Victim of any crime within the scope of the survey")
pd_latlon@data
all_vars
all_vars[[1]]
#### map data
pd_latlon <- readRDS("data/pd_mapdata.RDS")
df %>% filter(year==currentyear) %>% group_by(police_div) %>%
summarise(
anycrime = first(percentage[grepl("Victim of any crime",variable)]),
perccrime = first(percentage[grepl("same or less crime in local",variable)]),
confscjs = first(percentage[grepl("makes sure everyone has access",variable)])
) %>% mutate(
PDivName = police_div,
mytext_any = paste0("<b>",PDivName,"</b><br> Prevalence of all SCJS Crime: ",signif(anycrime,3),"%"),
mytext_perc = paste0("<b>",PDivName,"</b><br> Perceived same or less crime <br> in local area: ",signif(perccrime,3),"%"),
mytext_conf = paste0("<b>",PDivName,"</b><br> Confident in access to justice: ",signif(confscjs,3),"%")
) %>% left_join(pd_latlon@data, .) -> pd_latlon@data
#police division colours
pdivcols=c("Argyll & West Dunbartonshire (L Division)"='#66C2A5',
"Ayrshire (U Division)"='#FC8D62',
"Dumfries & Galloway (V Division)"='#8DA0CB',
"Edinburgh City (E Division)"='#E78AC3',
"Fife (P Division)"='#A6D854',
"Forth Valley (C Division)"='#FFD92F',
"Greater Glasgow (G Division)"='#E5C494',
"Highlands & Islands (N Division)"='#8DD3C7',
"Lanarkshire (Q Division)"='#FB8072',
"Lothians & Scottish Borders (J Division)"='#BEBADA',
"NA"='#FFFFB3',
"North East (A Division)"='#80B1D3',
"Renfrewshire & Inverclyde (K Division)"='#FDB462',
"Tayside (D Division)"='#B3DE69',
"National Average"='#000000')
#colours for overview page (national avg = black, and up/down/none is included)
overview_cols=c(pdivcols,
"No difference"="#BDBDBD",
"More Positive"="#95fb71",
"Less Positive"="#fb7171")
#modebar icons to remove
modebar_remove <- c('hoverClosestCartesian','hoverCompareCartesian','zoom2d','pan2d','toggleSpikelines','select2d','lasso2d','zoomIn2d','zoomOut2d')
# USER INPUTS
des_factors <- df %>% group_by(year) %>% summarise(des_f=first(des_effect)) #design factors
#####
require(tidyr)
require(dplyr)
require(ggplot2)
require(magrittr)
require(plotly)
#load in current set of func
df<-readRDS("data/pdiv9.5.test.rds")
# USER INPUTS
des_factors <- df %>% group_by(year) %>% summarise(des_f=first(des_effect)) #design factors
pdivis<-levels(factor(df$police_div)) #police divisions
years=levels(df$year) #years
currentyear=years[length(years)] #latest survey year
prevyear=years[length(years)-1] #previous survey year
firstyear=years[1] #first survey year
yn<-c("Yes","No") #yes no choices
getnames<-function(string){
df %>%
filter(grepl(string,variable)) %>%
pull(name_trunc) %>%
unique() %>%
as.character()
}
#variables/variable groupings
all_vars<-list('National Indicators'= getnames("PREVSURVEY|QS2AREA:|DCONF_03"),
'Rates of Crime Victimisation'=getnames("PREV"),
'Confidence in the Police'=getnames("POLCONF"),
'Attitudes to the Police'=getnames("POLOP|POLPRES|RATPOL"),
'Confidence in Scottish Criminal Justice System'=getnames("DCONF"),
'Perceptions of Crime Rates and Safety'=getnames("QS"),
'Perceptions of Local Crime'=getnames("QACO"),
'Perceptions of Local People'=getnames("LCPEOP"),
'Worries of Crime Victimisation'=getnames("QWORR"),
'Worries of Being Harassed'=getnames("HWORR")
)
#now overwrite variable with more user-friendly input
df$variable<-df$name_trunc
#### map data
pd_latlon <- readRDS("data/pd_mapdata.RDS")
df %>% filter(year==currentyear) %>% group_by(police_div) %>%
summarise(
anycrime = first(percentage[grepl("Victim of any crime",variable)]),
perccrime = first(percentage[grepl("same or less crime in local",variable)]),
confscjs = first(percentage[grepl("makes sure everyone has access",variable)])
) %>% mutate(
PDivName = police_div,
mytext_any = paste0("<b>",PDivName,"</b><br> Prevalence of all SCJS Crime: ",signif(anycrime,3),"%"),
mytext_perc = paste0("<b>",PDivName,"</b><br> Perceived same or less crime <br> in local area: ",signif(perccrime,3),"%"),
mytext_conf = paste0("<b>",PDivName,"</b><br> Confident in access to justice: ",signif(confscjs,3),"%")
) %>% left_join(pd_latlon@data, .) -> pd_latlon@data
############
#FINALLY, save Rdata to the app directory
############
ungroup(df) -> df
#update the app data.
save.image(file = "./app/.RData")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
pal=colorNumeric(
palette = c("Reds","Blues","Greens")[indx],
domain=pd_latlon@data$anycrime
)
indx=1
pal=colorNumeric(
palette = c("Reds","Blues","Greens")[indx],
domain=pd_latlon@data$anycrime
)
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 6) %>%
#addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~pal(anycrime),
highlightOptions = highlightOptions(color = "black", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal=pal,values=~anycrime,
title="Percentage Crime <br> Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
#update the app data.
save.image(file = "./app/.RData")
shiny::runApp(appDir="./app/")
pal=colorNumeric(
palette = c("Reds","Blues","Greens")[indx],
domain=pd_latlon@data$anycrime
)
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 6) %>%
#addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~as.formula(paste0("mytext",indx)),
fillColor = ~pal(anycrime),
highlightOptions = highlightOptions(color = "black", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal=pal,values=~anycrime,
title="Percentage Crime <br> Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
#### map data
pd_latlon <- readRDS("data/pd_mapdata.RDS")
df %>% filter(year==currentyear) %>% group_by(police_div) %>%
summarise(
nat_ind1 = first(percentage[grepl("Victim of any crime",variable)]),
nat_ind2 = first(percentage[grepl("same or less crime in local",variable)]),
nat_ind3 = first(percentage[grepl("makes sure everyone has access",variable)])
) %>% mutate(
PDivName = police_div,
mytext1 = paste0("<b>",PDivName,"</b><br> Prevalence of all SCJS Crime: ",signif(anycrime,3),"%"),
mytext2 = paste0("<b>",PDivName,"</b><br> Perceived same or less crime <br> in local area: ",signif(perccrime,3),"%"),
mytext3 = paste0("<b>",PDivName,"</b><br> Confident in access to justice: ",signif(confscjs,3),"%")
) %>% left_join(pd_latlon@data, .) -> pd_latlon@data
############
#FINALLY, save Rdata to the app directory
############
ungroup(df) -> df
#update the app data.
save.image(file = "./app/.RData")
shiny::runApp(appDir="./app/")
pal=colorNumeric(
palette = c("Reds","Blues","Greens")[indx],
domain=pd_latlon@data$anycrime
)
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 6) %>%
#addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~as.formula(paste0("mytext",indx)),
fillColor = ~pal(anycrime),
highlightOptions = highlightOptions(color = "black", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal=pal,values=~anycrime,
title="Percentage Crime <br> Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
paste0("nat_ind",indx)
shiny::runApp(appDir="./app/")
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 6) %>%
#addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~as.formula(paste0("mytext",indx)),
fillColor = ~pal(as.formula(paste0("nat_ind",indx))),
highlightOptions = highlightOptions(color = "black", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal=pal,values=~as.formula(paste0("nat_ind",indx)),
title="Percentage Crime <br> Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
df %>% filter(year==currentyear) %>% group_by(police_div) %>%
summarise(
percentage = first(percentage[grepl(input$map_var,variable)])
) %>% mutate(
PDivName = police_div,
mytext = paste0("<b>",PDivName,"</b><br>",wrapped_name,"<br>",signif(anycrime,3),"%"),
mytitle = paste0(wrapped_name,"<br>(2014/15)")
) %>% left_join(pd_latlon@data, .) -> pd_latlon@data
imap_var==all_vars[[1]][2]
imap_var<-all_vars[[1]][2]
df %>% filter(year==currentyear) %>% group_by(police_div) %>%
summarise(
percentage = first(percentage[grepl(imap_var,variable)])
) %>% mutate(
PDivName = police_div,
mytext = paste0("<b>",PDivName,"</b><br>",wrapped_name,"<br>",signif(anycrime,3),"%"),
mytitle = paste0(wrapped_name,"<br>(2014/15)")
) %>% left_join(pd_latlon@data, .) -> pd_latlon@data
df %>% filter(year==currentyear) %>% group_by(police_div) %>%
summarise(
percentage = first(percentage[grepl(imap_var,variable)])
) %>% mutate(
wrapped_name = sapply(name_trunc, FUN = function(x) {paste(strwrap(x, width = 35), collapse = "<br>")}),
PDivName = police_div,
mytext = paste0("<b>",PDivName,"</b><br>",wrapped_name,"<br>",signif(anycrime,3),"%"),
mytitle = paste0(wrapped_name,"<br>(2014/15)")
) %>% left_join(pd_latlon@data, .) -> pd_latlon@data
df %>% filter(year==currentyear) %>% filter(grepl(imap_var,variable)) %>%
group_by(police_div) %>%
summarise(
percentage = first(percentage),
wrapped_name = first(wrapped_name)
)
df %>% filter(year==currentyear) %>% filter(grepl(imap_var,variable)) %>%
group_by(police_div) %>%
summarise(
percentage = first(percentage),
wrapped_name = first(wrapped_name)
) %>% mutate(
PDivName = police_div,
mytext = paste0("<b>",PDivName,"</b><br>",wrapped_name,"<br>",signif(anycrime,3),"%"),
mytitle = paste0(wrapped_name,"<br>(2014/15)")
) %>% left_join(pd_latlon@data, .) -> pd_latlon@data
df %>% filter(year==currentyear) %>% filter(grepl(imap_var,variable)) %>%
group_by(police_div) %>%
summarise(
percentage = first(percentage),
wrapped_name = first(wrapped_name)
) %>% mutate(
PDivName = police_div,
mytext = paste0("<b>",PDivName,"</b><br>",wrapped_name,"<br>",signif(percentage,3),"%"),
mytitle = paste0(wrapped_name,"<br>(2014/15)")
) %>% left_join(pd_latlon@data, .) -> pd_latlon@data
indx=which(all_vars[[1]]==input$map_var)
indx=which(all_vars[[1]]==imap_var)
pal=colorNumeric(
palette = c("Reds","Blues","Greens")[indx],
domain=pd_latlon@data$percentage
)
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 6) %>%
#addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~pal(percentage),
highlightOptions = highlightOptions(color = "black", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal=pal,values=~percentage,
title=mytitle,
labFormat=labelFormat(suffix="%"))
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 6) %>%
#addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~pal(percentage),
highlightOptions = highlightOptions(color = "black", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal=pal,values=~percentage,
title=~mytitle,
labFormat=labelFormat(suffix="%"))
df %>% filter(year==currentyear) %>% filter(grepl(imap_var,variable)) %>%
group_by(police_div) %>%
summarise(
percentage = first(percentage),
wrapped_name = first(wrapped_name)
) %>% mutate(
PDivName = police_div,
mytext = paste0("<b>",PDivName,"</b><br>",wrapped_name,"<br>",signif(percentage,3),"%"),
mytitle = paste0(wrapped_name,"<br>(2014/15)")
) %>% left_join(pd_latlon@data, .) -> pd_latlon@data
maptitle=pd_latlon@data$percentage[1]
indx=which(all_vars[[1]]==imap_var)
pal=colorNumeric(
palette = c("Reds","Blues","Greens")[indx],
domain=pd_latlon@data$percentage
)
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 6) %>%
#addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~pal(percentage),
highlightOptions = highlightOptions(color = "black", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal=pal,values=~percentage,
title=maptitle,
labFormat=labelFormat(suffix="%"))
maptitle=pd_latlon@data$mytitle[1]
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 6) %>%
#addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~pal(percentage),
highlightOptions = highlightOptions(color = "black", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal=pal,values=~percentage,
title=maptitle,
labFormat=labelFormat(suffix="%"))
#police division colours
pdivcols=c("Argyll & West Dunbartonshire (L Division)"='#66C2A5',
"Ayrshire (U Division)"='#FC8D62',
"Dumfries & Galloway (V Division)"='#8DA0CB',
"Edinburgh City (E Division)"='#E78AC3',
"Fife (P Division)"='#A6D854',
"Forth Valley (C Division)"='#FFD92F',
"Greater Glasgow (G Division)"='#E5C494',
"Highlands & Islands (N Division)"='#8DD3C7',
"Lanarkshire (Q Division)"='#FB8072',
"Lothians & Scottish Borders (J Division)"='#BEBADA',
"NA"='#FFFFB3',
"North East (A Division)"='#80B1D3',
"Renfrewshire & Inverclyde (K Division)"='#FDB462',
"Tayside (D Division)"='#B3DE69',
"National Average"='#000000')
#colours for overview page (national avg = black, and up/down/none is included)
overview_cols=c(pdivcols,
"No difference"="#BDBDBD",
"More Positive"="#95fb71",
"Less Positive"="#fb7171")
#modebar icons to remove
modebar_remove <- c('hoverClosestCartesian','hoverCompareCartesian','zoom2d','pan2d','toggleSpikelines','select2d','lasso2d','zoomIn2d','zoomOut2d')
df<-readRDS("data/pdiv9.5.test.rds")
# USER INPUTS
des_factors <- df %>% group_by(year) %>% summarise(des_f=first(des_effect)) #design factors
pdivis<-levels(factor(df$police_div)) #police divisions
years=levels(df$year) #years
currentyear=years[length(years)] #latest survey year
prevyear=years[length(years)-1] #previous survey year
firstyear=years[1] #first survey year
yn<-c("Yes","No") #yes no choices
# VARIABLE LISTS
getnames<-function(string){
df %>%
filter(grepl(string,variable)) %>%
pull(name_trunc) %>%
unique() %>%
as.character()
}
#variables/variable groupings
all_vars<-list('National Indicators'= getnames("PREVSURVEY|QS2AREA:|DCONF_03"),
'Rates of Crime Victimisation'=getnames("PREV"),
'Confidence in the Police'=getnames("POLCONF"),
'Attitudes to the Police'=getnames("POLOP|POLPRES|RATPOL"),
'Confidence in Scottish Criminal Justice System'=getnames("DCONF"),
'Perceptions of Crime Rates and Safety'=getnames("QS"),
'Perceptions of Local Crime'=getnames("QACO"),
'Perceptions of Local People'=getnames("LCPEOP"),
'Worries of Crime Victimisation'=getnames("QWORR"),
'Worries of Being Harassed'=getnames("HWORR")
)
#now overwrite variable with more user-friendly input
df$variable<-df$name_trunc
#### map data
pd_latlon <- readRDS("data/pd_mapdata.RDS")
############
#FINALLY, save Rdata to the app directory
############
ungroup(df) -> df
#update the app data.
save.image(file = "./app/.RData")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
