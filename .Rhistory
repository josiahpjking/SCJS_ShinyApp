df %>% filter(police_div=="National Average",
variable %in% all_vars[[1]])
df %>% filter(police_div=="National Average",
variable %in% all_vars[[1]]) %>%
group_by(variable) %>%
summarise(
text3 = lapply(paste0(round(percentage,1),"% in ", year))
)
df %>% filter(police_div=="National Average",
variable %in% all_vars[[1]]) %>%
group_by(variable) %>%
summarise(
text3 = list(paste0(round(percentage,1),"% in ", year))
)
df %>% filter(police_div=="National Average",
variable %in% all_vars[[1]]) %>%
group_by(variable) %>%
summarise(
text3 = list(paste0(round(percentage,1),"% in ", year))
) ->ds
View(ds)
df %>% filter(police_div=="National Average",
variable %in% all_vars[[1]]) %>%
group_by(variable) %>%
summarise(
text3 = list(year,": ",paste0(round(percentage,1),"%"))
) ->ds
df %>% filter(police_div=="National Average",
variable %in% all_vars[[1]]) %>%
group_by(variable) %>%
summarise(
text3 = list(paste0(year,": ",round(percentage,1),"%"))
) ->ds
View(ds)
df %>% filter(police_div=="National Average",
year %in% c(currentyear,prevyear),
variable %in% all_vars[[1]]) %>%
group_by(variable) %>%
summarise(
current_percentage = percentage[which(year==currentyear)],
prev_percentage = round(percentage[which(year==prevyear)],1),
current_ci = ci[which(year==currentyear)],
p_diff=abs(diff(p)),
c=sqrt(sum(ci^2)),
p_signif=p_diff>c,
rev_coded=first(reverse_coded),
thisyear = ifelse(p_signif==TRUE & year[which(p==min(p))]==currentyear, "down",
ifelse(p_signif==TRUE & year[which(p==min(p))]!=currentyear, "up",
"same")),
thisyear_direction = factor(ifelse(rev_coded==1 & thisyear=="up","down",
ifelse(rev_coded==1 & thisyear=="down","up", thisyear))),
text1 = as.character(fct_recode(thisyear_direction, "IMPROVING"="up","WORSENING"="down","MAINTAINING"="same")),
text2 = paste0(round(current_percentage,1),"% ",text1)
) %>% select(variable, current_percentage, current_ci, thisyear, text1, text2) -> image_data
df %>% filter(police_div=="National Average",
variable %in% all_vars[[1]]) %>%
group_by(variable) %>%
summarise(
text3 = list(paste0(year,": ",round(percentage,1),"%"))
) %>% left_join(image_data, .)
####################### RUN THE APP ############################
#load("app/.RData")
shiny::runApp(appDir="./app/")
####################### RUN THE APP ############################
#load("app/.RData")
shiny::runApp(appDir="./app/")
####################### RUN THE APP ############################
#load("app/.RData")
shiny::runApp(appDir="./app/")
ni_crime_data[,7]
ni_crime_data[,7]
####################### RUN THE APP ############################
#load("app/.RData")
shiny::runApp(appDir="./app/")
df<-readRDS("data/pdiv10.1.rds")
#police division colours
pdivcols=c("Argyll & West Dunbartonshire (L Division)"='#E41A1C',
"Ayrshire (U Division)"='#377EB8',
"Dumfries & Galloway (V Division)"='#4DAF4A',
"Edinburgh City (E Division)"='#984EA3',
"Fife (P Division)"='#FF7F00',
"Forth Valley (C Division)"='#FFFF33',
"Greater Glasgow (G Division)"='#A65628',
"Highlands & Islands (N Division)"='#F781BF',
"Lanarkshire (Q Division)"='#1B9E77',
"Lothians & Scottish Borders (J Division)"='#D95F02',
"North East (A Division)"='#7570B3',
"Renfrewshire & Inverclyde (K Division)"='#66A61E',
"Tayside (D Division)"='#E6AB02',
"National Average"='#000000')
#colours for overview page (national avg = black, and better/worse/none is included)
overview_cols=c(pdivcols,
"No difference"="#BDBDBD",
"More Positive"="#95fb71",
"Less Positive"="#fb7171")
#modebar icons to remove (these are the little buttons on the plots.)
modebar_remove <- c('hoverClosestCartesian','hoverCompareCartesian','zoom2d','pan2d','toggleSpikelines','select2d','lasso2d','zoomIn2d','zoomOut2d')
#app-user inputs. (these are the choices users will get to select from)
des_factor <- df %>% group_by(year) %>% summarise(des_f=first(des_fact)) #design factors
pdivis<-levels(factor(df$police_div)) #police divisions
years=levels(df$year) #years
currentyear=years[length(years)] #latest survey year
prevyear=years[length(years)-1] #previous survey year
firstyear=years[1] #first survey year
yn<-c("Yes","No") #yes no choices
getnames<-function(string){
df %>%
filter(grepl(string,variable)) %>%
pull(name_trunc) %>%
unique() %>%
as.character()
}
#variables/variable groupings
all_vars<-list('National Indicators'= getnames("PREVSURVEY|QS2AREA:|DCONF_03"),
'Rates of Crime Victimisation'=getnames("PREV"),
'Confidence in the Police'=getnames("POLCONF|RATPOL"),
'Attitudes to the Police'=getnames("POLOP|POLPRES"),
'Confidence in Scottish Criminal Justice System'=getnames("DCONF"),
'Perceptions of Crime Rates and Fear of Crime'=getnames("QS"),
'Perceptions of Local Crime'=getnames("QACO"),
'Perceptions of Local Community'=getnames("LCPEOP"),
'Worries of Crime Victimisation'=getnames("QWORR"),
'Worries of Being Harassed'=getnames("HWORR")
)
#now overwrite variable with more user-friendly input
df$variable<-df$name_trunc
######## map data ##########
pd_latlon <- readRDS("data/pd_mapdata.RDS")
############ save Rdata to the app directory ############
ungroup(df) -> df
#update the app data.
save.image(file = "./app/.RData")
####################### RUN THE APP ############################
#load("app/.RData")
shiny::runApp(appDir="./app/")
######## national indicator data #########
# this is just the data which is used to assess whether the national indicators have gone up or down since last survey year.
df %>% filter(police_div=="National Average",
year %in% c(currentyear,prevyear),
variable %in% all_vars[[1]]) %>%
group_by(variable) %>%
summarise(
current_percentage = percentage[which(year==currentyear)],
prev_percentage = round(percentage[which(year==prevyear)],1),
current_ci = ci[which(year==currentyear)],
p_diff=abs(diff(p)),
c=sqrt(sum(ci^2)),
p_signif=p_diff>c,
rev_coded=first(reverse_coded),
thisyear = ifelse(p_signif==TRUE & year[which(p==min(p))]==currentyear, "down",
ifelse(p_signif==TRUE & year[which(p==min(p))]!=currentyear, "up",
"same")),
thisyear_direction = factor(ifelse(rev_coded==1 & thisyear=="up","down",
ifelse(rev_coded==1 & thisyear=="down","up", thisyear))),
text1 = as.character(fct_recode(thisyear_direction, "IMPROVING"="up","WORSENING"="down","MAINTAINING"="same")),
text2 = paste0(round(current_percentage,1),"% ",text1)
) %>% select(variable, current_percentage, current_ci, thisyear, text1, text2) -> image_data
df %>% filter(police_div=="National Average",
variable %in% all_vars[[1]]) %>%
group_by(variable) %>%
summarise(
text3 = list(paste0(year,": ",round(percentage,1),"%"))
) %>% left_join(image_data, .)
#filter to each NI
image_data %>% filter(grepl("Confident",variable)) -> ni_conf_data
image_data %>% filter(grepl("Victim",variable)) -> ni_crime_data
image_data %>% filter(grepl("Perceived",variable)) -> ni_perc_data
View(ni_conf_data)
View(ni_conf_data)
df<-readRDS("data/pdiv10.1.rds")
#police division colours
pdivcols=c("Argyll & West Dunbartonshire (L Division)"='#E41A1C',
"Ayrshire (U Division)"='#377EB8',
"Dumfries & Galloway (V Division)"='#4DAF4A',
"Edinburgh City (E Division)"='#984EA3',
"Fife (P Division)"='#FF7F00',
"Forth Valley (C Division)"='#FFFF33',
"Greater Glasgow (G Division)"='#A65628',
"Highlands & Islands (N Division)"='#F781BF',
"Lanarkshire (Q Division)"='#1B9E77',
"Lothians & Scottish Borders (J Division)"='#D95F02',
"North East (A Division)"='#7570B3',
"Renfrewshire & Inverclyde (K Division)"='#66A61E',
"Tayside (D Division)"='#E6AB02',
"National Average"='#000000')
#colours for overview page (national avg = black, and better/worse/none is included)
overview_cols=c(pdivcols,
"No difference"="#BDBDBD",
"More Positive"="#95fb71",
"Less Positive"="#fb7171")
#modebar icons to remove (these are the little buttons on the plots.)
modebar_remove <- c('hoverClosestCartesian','hoverCompareCartesian','zoom2d','pan2d','toggleSpikelines','select2d','lasso2d','zoomIn2d','zoomOut2d')
#app-user inputs. (these are the choices users will get to select from)
des_factor <- df %>% group_by(year) %>% summarise(des_f=first(des_fact)) #design factors
pdivis<-levels(factor(df$police_div)) #police divisions
years=levels(df$year) #years
currentyear=years[length(years)] #latest survey year
prevyear=years[length(years)-1] #previous survey year
firstyear=years[1] #first survey year
yn<-c("Yes","No") #yes no choices
getnames<-function(string){
df %>%
filter(grepl(string,variable)) %>%
pull(name_trunc) %>%
unique() %>%
as.character()
}
#variables/variable groupings
all_vars<-list('National Indicators'= getnames("PREVSURVEY|QS2AREA:|DCONF_03"),
'Rates of Crime Victimisation'=getnames("PREV"),
'Confidence in the Police'=getnames("POLCONF|RATPOL"),
'Attitudes to the Police'=getnames("POLOP|POLPRES"),
'Confidence in Scottish Criminal Justice System'=getnames("DCONF"),
'Perceptions of Crime Rates and Fear of Crime'=getnames("QS"),
'Perceptions of Local Crime'=getnames("QACO"),
'Perceptions of Local Community'=getnames("LCPEOP"),
'Worries of Crime Victimisation'=getnames("QWORR"),
'Worries of Being Harassed'=getnames("HWORR")
)
#now overwrite variable with more user-friendly input
df$variable<-df$name_trunc
######## map data ##########
pd_latlon <- readRDS("data/pd_mapdata.RDS")
############ save Rdata to the app directory ############
ungroup(df) -> df
#update the app data.
save.image(file = "./app/.RData")
####################### RUN THE APP ############################
#load("app/.RData")
shiny::runApp(appDir="./app/")
shiny::runApp("app/")
ni_crime_data[,7]
######## national indicator data #########
# this is just the data which is used to assess whether the national indicators have gone up or down since last survey year.
df %>% filter(police_div=="National Average",
year %in% c(currentyear,prevyear),
variable %in% all_vars[[1]]) %>%
group_by(variable) %>%
summarise(
current_percentage = percentage[which(year==currentyear)],
prev_percentage = round(percentage[which(year==prevyear)],1),
current_ci = ci[which(year==currentyear)],
p_diff=abs(diff(p)),
c=sqrt(sum(ci^2)),
p_signif=p_diff>c,
rev_coded=first(reverse_coded),
thisyear = ifelse(p_signif==TRUE & year[which(p==min(p))]==currentyear, "down",
ifelse(p_signif==TRUE & year[which(p==min(p))]!=currentyear, "up",
"same")),
thisyear_direction = factor(ifelse(rev_coded==1 & thisyear=="up","down",
ifelse(rev_coded==1 & thisyear=="down","up", thisyear))),
text1 = as.character(fct_recode(thisyear_direction, "IMPROVING"="up","WORSENING"="down","MAINTAINING"="same")),
text2 = paste0(round(current_percentage,1),"% ",text1)
) %>% select(variable, current_percentage, current_ci, thisyear, text1, text2) -> image_data
df %>% filter(police_div=="National Average",
variable %in% all_vars[[1]]) %>%
group_by(variable) %>%
summarise(
text3 = list(paste0(year,": ",round(percentage,1),"%"))
) %>% left_join(image_data, .) -> image_data
#filter to each NI
image_data %>% filter(grepl("Confident",variable)) -> ni_conf_data
image_data %>% filter(grepl("Victim",variable)) -> ni_crime_data
image_data %>% filter(grepl("Perceived",variable)) -> ni_perc_data
ni_crime_data[,7]
unlist(ni_crime_data[,7])
shiny::runApp("app/")
ni_crime_data[,7]
unlist(ni_crime_data[,7])
as.character(unlist(ni_crime_data[,7]))
lapply(ni_crime_data[,7]),paste0())
lapply(ni_crime_data[,7]),paste0)
lapply(ni_crime_data[,7]),paste)
lapply(unlist(ni_crime_data[,7]),paste)
lapply(unlist(ni_crime_data[,7]))
unlist(ni_crime_data[,7]
paste(ni_crime_data[,7])
paste(unlist(ni_crime_data[,7]))
paste(paste(unlist(ni_crime_data[,7])))
paste(ni_crime_data[,7])
paste(unlist(ni_crime_data[,7]))
paste(unlist(ni_crime_data[,7]), collapse=",")
paste(unlist(ni_crime_data[,7]), collapse=", ")
paste(unlist(ni_crime_data[,7]), collapse="<br>")
shiny::runApp("app/")
shiny::runApp("app/")
df %>% filter(police_div=="National Average",
variable %in% all_vars[[1]]) -> plot_ni_data
ggplot(plot_ni_data, aes(x=year,y=percentage, group=1))+facet_wrap(~variable)
ggplot(plot_ni_data, aes(x=year,y=percentage, group=1))+geom_path()+facet_wrap(~variable)
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+geom_path()
View(ni_crime_data)
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+geom_path()+theme_void()
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_path()+theme_void() -> conf_plot
ggplot(plot_ni_data %>% filter(grepl("Victim",variable)), aes(x=year,y=percentage, group=1))+
geom_path()+theme_void() -> crime_plot
ggplot(plot_ni_data %>% filter(grepl("Perceived",variable)), aes(x=year,y=percentage, group=1))+
geom_path()+theme_void() -> perc_plot
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
ggplot(plot_ni_data %>% filter(grepl("Victim",variable)), aes(x=year,y=percentage, group=1))+
geom_path()+theme_void()
ggplot(plot_ni_data %>% filter(grepl("Victim",variable)), aes(x=year,y=percentage, group=1))+ylim(0,30)+
geom_path()+theme_void()
ggplot(plot_ni_data %>% filter(grepl("Victim",variable)), aes(x=year,y=percentage, group=1))+ylim(0,25)+
geom_path()+theme_void()
ggplot(plot_ni_data %>% filter(grepl("Victim",variable)), aes(x=year,y=percentage, group=1))+ylim(10,25)+
geom_path()+theme_void()
ggplot(plot_ni_data %>% filter(grepl("Perceived",variable)), aes(x=year,y=percentage, group=1))+
geom_path()+theme_void()
ggplot(plot_ni_data %>% filter(grepl("Victim",variable)), aes(x=year,y=percentage, group=1))+
geom_bar()+theme_void()
ggplot(plot_ni_data %>% filter(grepl("Victim",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
ylim(min(percentage)-5,max(percentage+5))
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
ylim(aes(min(percentage)-5,max(percentage+5)))
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
geom_point(aes(x=c(year[1],year[1]),y=c(max(percentage)+5,min(percentage)+5),size=0)
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
geom_point(aes(x=c(year[1],year[1]),y=c(max(percentage)+5,min(percentage)+5),size=0)+
scale_y_continuous()
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
geom_point(aes(x=c(year[1],year[1]),y=c(max(percentage)+5,min(percentage)+5)),size=0)+
scale_y_continuous()
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
geom_point(aes(x=c(year[1],year[1]),y=c(max(percentage)+5,min(percentage)+5)),size=0)
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
geom_point(aes(x=year[1],y=min(percentage)-5),size=0)
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
geom_point(aes(x=year[1],y=min(percentage)-5),size=0)+
scale_y_continuous()
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
geom_point(aes(x=year[1],y=min(percentage)-5),size=0)+
geom_point(aes(x=year[1],y=max(percentage)+5),size=0)+
scale_y_continuous()
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
geom_point(aes(x=year[1],y=min(percentage)-5),size=0)+
geom_point(aes(x=year[1],y=max(percentage)+5),size=0)+
scale_y_continuous(labels=comma)
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
#geom_bar(stat="identity")+theme_void()+
geom_point(aes(x=year[1],y=min(percentage)-5),size=0)+
geom_point(aes(x=year[1],y=max(percentage)+5),size=0)+
scale_y_continuous(labels=comma)
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
#geom_bar(stat="identity")+theme_void()+
geom_point(aes(x=year[1],y=min(percentage)-5),size=0)+
geom_point(aes(x=year[1],y=max(percentage)+5),size=0)
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_point(aes(x=year[1],y=min(percentage)-5),size=0)+
geom_point(aes(x=year[1],y=max(percentage)+5),size=0)+
geom_bar(stat="identity")+theme_void()
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_point(aes(x=year[1],y=min(percentage)-5),size=0)+
geom_point(aes(x=year[1],y=max(percentage)+5),size=0) -> p
p+ geom_bar(stat="identity")+theme_void()
p
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
geom_point(aes(x=year[1],y=min(percentage)-5),size=0)+
geom_point(aes(x=year[1],y=max(percentage)+5),size=0)+scale_y_continuous()
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
geom_point(aes(x=year[1],y=min(percentage)-5),size=0)+
geom_point(aes(x=year[1],y=max(percentage)+5),size=0)+scale_y_continuous(percentage)
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
geom_point(aes(x=year[1],y=min(percentage)-5),size=0)+
geom_point(aes(x=year[1],y=max(percentage)+5),size=0)+scale_y_continuous(aes(percentage))
?scale_y_continuous
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
geom_point(aes(x=year[1],y=min(percentage)-5),size=0)+
geom_point(aes(x=year[1],y=max(percentage)+5),size=0)+scale_y_continuous(limits=NA)
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
geom_point(aes(x=year[1],y=min(percentage)-5),size=0)+
geom_point(aes(x=year[1],y=max(percentage)+5),size=0)+scale_y_continuous(limits=c(NA,NA))
shiny::runApp("app/")
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+scale_y_continuous(oob=rescale_none)
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+scale_y_continuous()
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
ylim(50,100)
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+theme_void()+
ylim(50,100)
plot_ni_data
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")+ylim(50,100)
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+ ylim(50,100)
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+ ylim(50,100)
geom_bar(stat="identity")
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+ ylim(50,100)+
geom_bar(stat="identity")
ggplot(plot_ni_data %>% filter(grepl("Confident",variable)), aes(x=year,y=percentage, group=1))+
geom_bar(stat="identity")
geom_bar
?geom_bar
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
shiny::runApp("app/")
df<-readRDS("data/pdiv10.1.rds")
#police division colours
pdivcols=c("Argyll & West Dunbartonshire (L Division)"='#E41A1C',
"Ayrshire (U Division)"='#377EB8',
"Dumfries & Galloway (V Division)"='#4DAF4A',
"Edinburgh City (E Division)"='#984EA3',
"Fife (P Division)"='#FF7F00',
"Forth Valley (C Division)"='#FFFF33',
"Greater Glasgow (G Division)"='#A65628',
"Highlands & Islands (N Division)"='#F781BF',
"Lanarkshire (Q Division)"='#1B9E77',
"Lothians & Scottish Borders (J Division)"='#D95F02',
"North East (A Division)"='#7570B3',
"Renfrewshire & Inverclyde (K Division)"='#66A61E',
"Tayside (D Division)"='#E6AB02',
"National Average"='#000000')
#colours for overview page (national avg = black, and better/worse/none is included)
overview_cols=c(pdivcols,
"No difference"="#BDBDBD",
"More Positive"="#95fb71",
"Less Positive"="#fb7171")
#modebar icons to remove (these are the little buttons on the plots.)
modebar_remove <- c('hoverClosestCartesian','hoverCompareCartesian','zoom2d','pan2d','toggleSpikelines','select2d','lasso2d','zoomIn2d','zoomOut2d')
#app-user inputs. (these are the choices users will get to select from)
des_factor <- df %>% group_by(year) %>% summarise(des_f=first(des_fact)) #design factors
pdivis<-levels(factor(df$police_div)) #police divisions
years=levels(df$year) #years
currentyear=years[length(years)] #latest survey year
prevyear=years[length(years)-1] #previous survey year
firstyear=years[1] #first survey year
yn<-c("Yes","No") #yes no choices
getnames<-function(string){
df %>%
filter(grepl(string,variable)) %>%
pull(name_trunc) %>%
unique() %>%
as.character()
}
#variables/variable groupings
all_vars<-list('National Indicators'= getnames("PREVSURVEY|QS2AREA:|DCONF_03"),
'Rates of Crime Victimisation'=getnames("PREV"),
'Confidence in the Police'=getnames("POLCONF|RATPOL"),
'Attitudes to the Police'=getnames("POLOP|POLPRES"),
'Confidence in Scottish Criminal Justice System'=getnames("DCONF"),
'Perceptions of Crime Rates and Fear of Crime'=getnames("QS"),
'Perceptions of Local Crime'=getnames("QACO"),
'Perceptions of Local Community'=getnames("LCPEOP"),
'Worries of Crime Victimisation'=getnames("QWORR"),
'Worries of Being Harassed'=getnames("HWORR")
)
#now overwrite variable with more user-friendly input
df$variable<-df$name_trunc
######## map data ##########
pd_latlon <- readRDS("data/pd_mapdata.RDS")
############ save Rdata to the app directory ############
ungroup(df) -> df
#update the app data.
save.image(file = "./app/.RData")
####################### RUN THE APP ############################
#load("app/.RData")
shiny::runApp(appDir="./app/")
