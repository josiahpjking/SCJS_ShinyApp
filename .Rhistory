unique() %>%
as.character()
}
#variables/variable groupings
all_vars<-list('National Indicators'= getnames("PREVSURVEY|QS2AREA:|DCONF_03"),
'Rates of Crime Victimisation'=getnames("PREV"),
'Confidence in the Police'=getnames("POLCONF|RATPOL"),
'Attitudes to the Police'=getnames("POLOP|POLPRES"),
'Confidence in Scottish Criminal Justice System'=getnames("DCONF"),
'Perceptions of Crime Rates and Safety'=getnames("QS"),
'Perceptions of Local Crime'=getnames("QACO"),
'Perceptions of Local People'=getnames("LCPEOP"),
'Worries of Crime Victimisation'=getnames("QWORR"),
'Worries of Being Harassed'=getnames("HWORR")
)
######## map data ##########
pd_latlon <- readRDS("data/pd_mapdata.RDS")
######## national indicator data #########
df %>% filter(police_div=="National Average",
year %in% c(currentyear,prevyear),
variable %in% all_vars[[1]]) %>%
group_by(variable) %>%
summarise(
current_percentage = percentage[which(year==currentyear)],
current_ci = ci[which(year==currentyear)],
p_diff=abs(diff(p)),
c=sqrt(sum(ci^2)),
p_signif=p_diff>c,
rev_coded=first(reverse_coded),
thisyear = ifelse(p_signif==TRUE & year[which(p==min(p))]==currentyear, "lower",
ifelse(p_signif==TRUE & year[which(p==min(p))]!=currentyear, "higher",
"same")),
thisyear_imp = ifelse(rev_coded==1 & thisyear=="higher","lower",
ifelse(rev_coded==1 & thisyear=="lower","higher", thisyear)),
thisyear_col = ifelse(thisyear_imp=="higher","#95fb71",
ifelse(thisyear_imp=="lower","#fb7171","#BDBDBD"))
) %>% select(variable, current_percentage, current_ci, thisyear_imp, thisyear_col) -> image_data
image_data %>% filter(grepl("Confident",variable)) -> ni_conf_data
image_data %>% filter(grepl("Victim",variable)) -> ni_crime_data
image_data %>% filter(grepl("Perceived",variable)) -> ni_perc_data
############ save Rdata to the app directory ############
#now overwrite variable with more user-friendly input
df$variable<-df$name_trunc
ungroup(df) -> df
#update the app data.
save.image(file = "./app/.RData")
df<-readRDS("data/pdiv9.6.test.rds")
#police division colours
pdivcols=c("Argyll & West Dunbartonshire (L Division)"='#66C2A5',
"Ayrshire (U Division)"='#FC8D62',
"Dumfries & Galloway (V Division)"='#8DA0CB',
"Edinburgh City (E Division)"='#E78AC3',
"Fife (P Division)"='#A6D854',
"Forth Valley (C Division)"='#FFD92F',
"Greater Glasgow (G Division)"='#E5C494',
"Highlands & Islands (N Division)"='#8DD3C7',
"Lanarkshire (Q Division)"='#FB8072',
"Lothians & Scottish Borders (J Division)"='#BEBADA',
"NA"='#FFFFB3',
"North East (A Division)"='#80B1D3',
"Renfrewshire & Inverclyde (K Division)"='#FDB462',
"Tayside (D Division)"='#B3DE69',
"National Average"='#000000')
df<-readRDS("data/pdiv9.6.test.rds")
#police division colours
pdivcols=c("Argyll & West Dunbartonshire (L Division)"='#66C2A5',
"Ayrshire (U Division)"='#FC8D62',
"Dumfries & Galloway (V Division)"='#8DA0CB',
"Edinburgh City (E Division)"='#E78AC3',
"Fife (P Division)"='#A6D854',
"Forth Valley (C Division)"='#FFD92F',
"Greater Glasgow (G Division)"='#E5C494',
"Highlands & Islands (N Division)"='#8DD3C7',
"Lanarkshire (Q Division)"='#FB8072',
"Lothians & Scottish Borders (J Division)"='#BEBADA',
"NA"='#FFFFB3',
"North East (A Division)"='#80B1D3',
"Renfrewshire & Inverclyde (K Division)"='#FDB462',
"Tayside (D Division)"='#B3DE69',
"National Average"='#000000')
#colours for overview page (national avg = black, and better/worse/none is included)
overview_cols=c(pdivcols,
"No difference"="#BDBDBD",
"More Positive"="#95fb71",
"Less Positive"="#fb7171")
#modebar icons to remove (these are the little buttons on the plots.)
modebar_remove <- c('hoverClosestCartesian','hoverCompareCartesian','zoom2d','pan2d','toggleSpikelines','select2d','lasso2d','zoomIn2d','zoomOut2d')
des_factor <- df %>% group_by(year) %>% summarise(des_f=first(des_factor)) #design factors
des_factor <- df %>% group_by(year) %>% summarise(des_f=first(des_fact)) #design factors
pdivis<-levels(factor(df$police_div)) #police divisions
years=levels(df$year) #years
currentyear=years[length(years)] #latest survey year
prevyear=years[length(years)-1] #previous survey year
firstyear=years[1] #first survey year
yn<-c("Yes","No") #yes no choices
getnames<-function(string){
df %>%
filter(grepl(string,variable)) %>%
pull(name_trunc) %>%
unique() %>%
as.character()
}
#variables/variable groupings
all_vars<-list('National Indicators'= getnames("PREVSURVEY|QS2AREA:|DCONF_03"),
'Rates of Crime Victimisation'=getnames("PREV"),
'Confidence in the Police'=getnames("POLCONF|RATPOL"),
'Attitudes to the Police'=getnames("POLOP|POLPRES"),
'Confidence in Scottish Criminal Justice System'=getnames("DCONF"),
'Perceptions of Crime Rates and Safety'=getnames("QS"),
'Perceptions of Local Crime'=getnames("QACO"),
'Perceptions of Local People'=getnames("LCPEOP"),
'Worries of Crime Victimisation'=getnames("QWORR"),
'Worries of Being Harassed'=getnames("HWORR")
)
######## map data ##########
pd_latlon <- readRDS("data/pd_mapdata.RDS")
df %>% filter(police_div=="National Average",
year %in% c(currentyear,prevyear),
variable %in% all_vars[[1]])
all_vars[[1]]
#now overwrite variable with more user-friendly input
df$variable<-df$name_trunc
######## national indicator data #########
df %>% filter(police_div=="National Average",
year %in% c(currentyear,prevyear),
variable %in% all_vars[[1]]) %>%
group_by(variable) %>%
summarise(
current_percentage = percentage[which(year==currentyear)],
current_ci = ci[which(year==currentyear)],
p_diff=abs(diff(p)),
c=sqrt(sum(ci^2)),
p_signif=p_diff>c,
rev_coded=first(reverse_coded),
thisyear = ifelse(p_signif==TRUE & year[which(p==min(p))]==currentyear, "lower",
ifelse(p_signif==TRUE & year[which(p==min(p))]!=currentyear, "higher",
"same")),
thisyear_imp = ifelse(rev_coded==1 & thisyear=="higher","lower",
ifelse(rev_coded==1 & thisyear=="lower","higher", thisyear)),
thisyear_col = ifelse(thisyear_imp=="higher","#95fb71",
ifelse(thisyear_imp=="lower","#fb7171","#BDBDBD"))
) %>% select(variable, current_percentage, current_ci, thisyear_imp, thisyear_col) -> image_data
image_data %>% filter(grepl("Confident",variable)) -> ni_conf_data
image_data %>% filter(grepl("Victim",variable)) -> ni_crime_data
image_data %>% filter(grepl("Perceived",variable)) -> ni_perc_data
rm(image_data)
rm(image_data,getnames)
ungroup(df) -> df
#update the app data.
save.image(file = "./app/.RData")
shiny::runApp(appDir="./app/")
#police division colours
pdivcols=c("Argyll & West Dunbartonshire (L Division)"='#66C2A5',
"Ayrshire (U Division)"='#FC8D62',
"Dumfries & Galloway (V Division)"='#8DA0CB',
"Edinburgh City (E Division)"='#E78AC3',
"Fife (P Division)"='#A6D854',
"Forth Valley (C Division)"='#FFD92F',
"Greater Glasgow (G Division)"='#E5C494',
"Highlands & Islands (N Division)"='#8DD3C7',
"Lanarkshire (Q Division)"='#F93D28',
"Lothians & Scottish Borders (J Division)"='#BEBADA',
"NA"='#FFFFB3',
"North East (A Division)"='#80B1D3',
"Renfrewshire & Inverclyde (K Division)"='#FDB462',
"Tayside (D Division)"='#B3DE69',
"National Average"='#000000')
#update the app data.
save.image(file = "./app/.RData")
shiny::runApp(appDir="./app/")
RColorBrewer::brewer.pal(9,"Set1")
RColorBrewer::brewer.pal(9,"Dark2")
RColorBrewer::brewer.pal(8,"Dark2")
#police division colours
pdivcols=c("Argyll & West Dunbartonshire (L Division)"='#E41A1C',
"Ayrshire (U Division)"='#377EB8',
"Dumfries & Galloway (V Division)"='#4DAF4A',
"Edinburgh City (E Division)"='#984EA3',
"Fife (P Division)"='#FF7F00',
"Forth Valley (C Division)"='#FFFF33',
"Greater Glasgow (G Division)"='#A65628',
"Highlands & Islands (N Division)"='#F781BF',
"Lanarkshire (Q Division)"='#1B9E77',
"Lothians & Scottish Borders (J Division)"='#D95F02',
"North East (A Division)"='#7570B3',
"Renfrewshire & Inverclyde (K Division)"='#66A61E',
"Tayside (D Division)"='#E6AB02',
"National Average"='#000000')
#colours for overview page (national avg = black, and better/worse/none is included)
overview_cols=c(pdivcols,
"No difference"="#BDBDBD",
"More Positive"="#95fb71",
"Less Positive"="#fb7171")
#update the app data.
save.image(file = "./app/.RData")
shiny::runApp(appDir="./app/")
data_files <- dir(path = "/data/", pattern='SCJS*', recursive = T,full.names = T)
data_files <- dir(path = "data/", pattern='SCJS*', recursive = T,full.names = T)
# READ IN DATA.
# if you want more variables, you need to add in the string (lowercase) to identify those questions.
all_data <- bind_rows(lapply(data_files, function(x) extract_name_data(x,"serial|age|laa|hba|cjaa|gen|urb|tenure|soc|nssec|simd|wgtg|prev|qpolconf|qs2area|qsfdark|qsfnigh|qratpol|polop|compol|polpres|qworr|numcar|nummot|qaco_|lcpeop|qhworr|qswem|dconf")), .id = "year")
#load in functions
source("setup/extract_name_data.R")
# READ IN DATA.
# if you want more variables, you need to add in the string (lowercase) to identify those questions.
all_data <- bind_rows(lapply(data_files, function(x) extract_name_data(x,"serial|age|laa|hba|cjaa|gen|urb|tenure|soc|nssec|simd|wgtg|prev|qpolconf|qs2area|qsfdark|qsfnigh|qratpol|polop|compol|polpres|qworr|numcar|nummot|qaco_|lcpeop|qhworr|qswem|dconf")), .id = "year")
shiny::runApp(appDir="./app/")
df %>% names()
df<-readRDS("data/pdiv9.6.test.rds")
df %>% names()
#police division colours
pdivcols=c("Argyll & West Dunbartonshire (L Division)"='#E41A1C',
"Ayrshire (U Division)"='#377EB8',
"Dumfries & Galloway (V Division)"='#4DAF4A',
"Edinburgh City (E Division)"='#984EA3',
"Fife (P Division)"='#FF7F00',
"Forth Valley (C Division)"='#FFFF33',
"Greater Glasgow (G Division)"='#A65628',
"Highlands & Islands (N Division)"='#F781BF',
"Lanarkshire (Q Division)"='#1B9E77',
"Lothians & Scottish Borders (J Division)"='#D95F02',
"North East (A Division)"='#7570B3',
"Renfrewshire & Inverclyde (K Division)"='#66A61E',
"Tayside (D Division)"='#E6AB02',
"National Average"='#000000')
#colours for overview page (national avg = black, and better/worse/none is included)
overview_cols=c(pdivcols,
"No difference"="#BDBDBD",
"More Positive"="#95fb71",
"Less Positive"="#fb7171")
#modebar icons to remove (these are the little buttons on the plots.)
modebar_remove <- c('hoverClosestCartesian','hoverCompareCartesian','zoom2d','pan2d','toggleSpikelines','select2d','lasso2d','zoomIn2d','zoomOut2d')
des_factor <- df %>% group_by(year) %>% summarise(des_f=first(des_fact)) #design factors
pdivis<-levels(factor(df$police_div)) #police divisions
years=levels(df$year) #years
currentyear=years[length(years)] #latest survey year
prevyear=years[length(years)-1] #previous survey year
firstyear=years[1] #first survey year
yn<-c("Yes","No") #yes no choices
getnames<-function(string){
df %>%
filter(grepl(string,variable)) %>%
pull(name_trunc) %>%
unique() %>%
as.character()
}
#variables/variable groupings
all_vars<-list('National Indicators'= getnames("PREVSURVEY|QS2AREA:|DCONF_03"),
'Rates of Crime Victimisation'=getnames("PREV"),
'Confidence in the Police'=getnames("POLCONF|RATPOL"),
'Attitudes to the Police'=getnames("POLOP|POLPRES"),
'Confidence in Scottish Criminal Justice System'=getnames("DCONF"),
'Perceptions of Crime Rates and Safety'=getnames("QS"),
'Perceptions of Local Crime'=getnames("QACO"),
'Perceptions of Local People'=getnames("LCPEOP"),
'Worries of Crime Victimisation'=getnames("QWORR"),
'Worries of Being Harassed'=getnames("HWORR")
)
#now overwrite variable with more user-friendly input
df$variable<-df$name_trunc
######## map data ##########
pd_latlon <- readRDS("data/pd_mapdata.RDS")
######## national indicator data #########
df %>% filter(police_div=="National Average",
year %in% c(currentyear,prevyear),
variable %in% all_vars[[1]]) %>%
group_by(variable) %>%
summarise(
current_percentage = percentage[which(year==currentyear)],
current_ci = ci[which(year==currentyear)],
p_diff=abs(diff(p)),
c=sqrt(sum(ci^2)),
p_signif=p_diff>c,
rev_coded=first(reverse_coded),
thisyear = ifelse(p_signif==TRUE & year[which(p==min(p))]==currentyear, "lower",
ifelse(p_signif==TRUE & year[which(p==min(p))]!=currentyear, "higher",
"same")),
thisyear_imp = ifelse(rev_coded==1 & thisyear=="higher","lower",
ifelse(rev_coded==1 & thisyear=="lower","higher", thisyear)),
thisyear_col = ifelse(thisyear_imp=="higher","#95fb71",
ifelse(thisyear_imp=="lower","#fb7171","#BDBDBD"))
) %>% select(variable, current_percentage, current_ci, thisyear_imp, thisyear_col) -> image_data
image_data %>% filter(grepl("Confident",variable)) -> ni_conf_data
image_data %>% filter(grepl("Victim",variable)) -> ni_crime_data
image_data %>% filter(grepl("Perceived",variable)) -> ni_perc_data
rm(image_data,getnames)
ungroup(df) -> df
#update the app data.
save.image(file = "./app/.RData")
shiny::runApp(appDir="./app/")
names(df)
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
?tabPanel
?source
?source
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
source("source/ui_trends.R",echo=F)
source("app/source/ui_trends.R",echo=F)
source("app/source/ui_trends.R")
source("app/source/ui_trends.R",print.eval=T)
source("app/source/ui_trends.R",print.=T)
source("app/source/ui_trends.R",print.=F)
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
?invisible
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
ui_trends<-function(id){
sidebarLayout(
sidebarPanel(
############### INPUTS/SIDE PANEL
div(class="sidebartext",
tags$p("Here you can visualise trends over time of various questions of the survey."),
tags$p("Choose a section of the survey to focus on, and then explore the variables which the SCJS collects in that area. You can also pick and choose which police divisions to show."),
tags$p("Information regarding confidence intervals and sample sizes is available when hovering the mouse over a line on the plot."),
actionLink("link_compare1",
"While confidence intervals go some way to indicating significantly different results, if you wish to find out whether two percentages are significantly different or not, head to the comparison tool.")
),
selectizeInput("trends_pdiv",label="Choose Police Divisions",choices=pdivis, selected="National Average", multiple = T, options = list(maxItems = length(pdivis))),
selectizeInput("trends_var", label = "Choose a section of the survey", choices=list("Survey Sections"=names(all_vars)), selected=names(all_vars)[1], multiple=F),
uiOutput('trends_var2')
),
############### OUTPUTS/PLOT PANEL
mainPanel(
div(class="plot-container",
tags$img(src="spinner.gif", id="loading-spinner"),
plotlyOutput("trendplot", height = "100%",width='100%')),
div(class="plot-below",
tags$p("Hover over the cursor over a point to see more information."),
checkboxInput("erbar",label = "Show Confidence Intervals",value=TRUE),
checkboxInput("showleg1",label = "Show Legend",value=TRUE),
actionButton("reset_trends","Reset plot")
)
)
)
}
shiny::runApp(appDir="./app/")
?NS
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
df$variable[df$police_div %in% pdivis[4] & df$year %in% years[1]]
df$p[df$police_div %in% pdivis[4] & df$year %in% years[1]]
findInterval(0.7,df$p[df$police_div %in% pdivis[4] & df$year %in% years[1]])
df$p[df$police_div %in% pdivis[4] & df$year %in% years[1]]
findInterval(0.7, df$p[df$police_div %in% pdivis[4] & df$year %in% years[1] & df$variable %in% all_vars[["National Indicators"]]])
df$p[df$police_div %in% pdivis[4] & df$year %in% years[1] & df$variable %in% all_vars[["National Indicators"]]]
shiny::runApp(appDir="./app/")
?NS
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
?NS
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
df %>% filter(police_div=="National Average") %>% mutate(
nat_avgp = percentage,
nat_avgci = ci
) %>% select(variable,year,nat_avgp,nat_avgci) -> nat_avg
#join and do proportion testing for all other data.
left_join(df, nat_avg) %>%
mutate(
p_diff=percentage-nat_avgp,
p_diff2=ifelse(reverse_coded==1,0-p_diff,p_diff),
p_direction=ifelse(p_diff2==0,"No difference",
ifelse(p_diff2>0,"More Positive","Less Positive")),
c=sqrt((ci^2)+(nat_avgci^2)),
change=ifelse(((abs(p_diff)/100)>c)==TRUE & p_direction=="More Positive","More Positive",
ifelse(((abs(p_diff)/100)>c)==TRUE & p_direction=="Less Positive","Less Positive","No difference")),
wrapped_name = sapply(name_trunc, FUN = function(x) {paste(strwrap(x, width = 35), collapse = "<br>")}),
#text for current_plot
my_text = paste0("<b>",police_div,"</b><br>",year,"<br>",wrapped_name,"<br><b>",round(percentage, digits=1),"</b>% +/-",round(ci*100, digits=1),", N = ",samplesize,"<br><i><b>Click to see this division relative<br>to the national average over time.<i></b>"),
#text for trendplot
my_text2 = paste0("<b>",year,"</b><br>",police_div,"<br>",wrapped_name,"<br><b>",round(percentage, digits=1),"</b>% +/-",round(ci*100, digits=1),", N = ",samplesize,"<br><i><b>Click to see this year<br>for all divisions.<i></b>"),
#truncated text for multi questions
my_text3 = paste0(wrapped_name,"<br><b>",round(percentage, digits=1),"</b>% +/-",round(ci*100, digits=1),", N = ",samplesize),
#text for nat average lines
natav_text = paste0("<b>",police_div,"</b><br>",year,"<br>",wrapped_name,"<br><b>",round(percentage, digits=1),"</b>% +/-",round(ci*100, digits=1),", N = ",samplesize),
#wrapped pdiv name
wrappedpolice_div=sapply(gsub(" Division","",police_div), FUN = function(x) {paste(strwrap(x, width = 15), collapse = "<br>")})
) %>% select(-c(p_direction,c)) -> overview_data
police_div %in% pdivis[4],
year %in% years[1],
variable %in% all_vars[[names(all_vars)[2]]]) %>%
select(variable,p_diff) -> yopts
overview_data %>% filter(
police_div %in% pdivis[4],
year %in% years[1],
variable %in% all_vars[[names(all_vars)[2]]]) %>%
select(variable,p_diff) -> yopts
yopts
overview_data %>% filter(
police_div %in% pdivis[4],
year %in% years[1],
variable %in% all_vars[[names(all_vars)[2]]])
police_div %in% pdivis[4],
year %in% years[1],
variable %in% all_vars[[names(all_vars)[2]]]) %>%
select(variable,p_diff) -> yopts
yopts
yopts[!is.na(yopts$p_diff)]
yopts[!is.na(yopts$p_diff),]
newy = 5.87
print(findInterval(newy, yopts$p_diff))
yopts = yopts[!is.na(yopts$p_diff),]
print(findInterval(newy, yopts$p_diff))
yopts$p_diff
print(findInterval(newy, c(yopts$p_diff)))
yopts %>% data.frame(.) ->yopts2
newy =
print(findInterval(newy, yopts2$p_diff))
newy = 5.87
print(findInterval(newy, yopts2$p_diff))
summary(yopts$p_diff)
class(yopts$p_diff)
print(findInterval(newy, yopts$p_diff))
findInterval(newy, yopts$p_diff)
yopts$p_diff
findInterval(newy, c(0.78,10.28,8.62))
?findInterval
police_div %in% pdivis[4],
year %in% years[1],
variable %in% all_vars[[names(all_vars)[2]]]) %>%
select(variable,p_diff) -> yopts
police_div %in% pdivis[4],
year %in% years[1],
variable %in% all_vars[[names(all_vars)[2]]]) %>%
select(variable,p_diff) %>% arrange(p_diff) -> yopts
yopts
overview_data %>% filter(
police_div %in% pdivis[4],
year %in% years[1],
variable %in% all_vars[[names(all_vars)[2]]]) %>%
select(variable,p_diff) %>% arrange(p_diff) -> yopts
yopts
newy = 5.87
yopts$p_diff
findInterval(newy, c(0.78,10.28,8.62))
findInterval(newy, c(0.78,10.28,18.62))
findInterval(newy, yopts$p_diff)
shiny::runApp(appDir="./app/")
yopts
yopts$variable[2]
yopts$variable[3]
rm(yopts,newy,yopts2)
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
findInterval(0.782, c(0.782066, 10.3, 12.34))
findInterval(0.782, c(0.01,0.782066, 10.3, 12.34))
shiny::runApp(appDir="./app/")
findInterval(10.28, c(0,782,8.6,10.3))
findInterval(10.28, c(0.782,8.6,10.3))
findInterval(10.28, c(0.782,8.6,10.2))
findInterval(10.28, c(0.782,8.6,10.2), all.inside=T)
findInterval(10.28, c(0.782,8.6,10.3), all.inside=T)
findInterval(10.28, c(0.782,8.6,10.8), all.inside=T)
findInterval(10.28, c(0.782,8.6), all.inside=T)
shiny::runApp(appDir="./app/")
findInterval(1, c(0.782,8.6,10.8), all.inside=T)
findInterval(1, c(0.782,8.6,10.8))
findInterval(1, c(0.782,8.6,10.8),left.open=TRUE)
findInterval(0.2, c(0.782,8.6,10.8),left.open=TRUE)
findInterval(0.2, c(0.782,8.6,10.8),left.open=TRUE, rightmost.closed = TRUE)
findInterval(10.2, c(0.782,8.6,10.8),left.open=TRUE, rightmost.closed = TRUE)
findInterval(10.9, c(0.782,8.6,10.8),left.open=TRUE, rightmost.closed = TRUE)
findInterval(10.9, c(0.782,8.6,10.8),left.open=TRUE, rightmost.closed = TRUE, all.inside=T)
findInterval(9, c(0.782,8.6,10.8),left.open=TRUE, rightmost.closed = TRUE, all.inside=T)
findInterval(9, c(0.782,8.6,10.8), rightmost.closed = TRUE, all.inside=T)
shiny::runApp(appDir="./app/")
min(abs(c(0.782,8.6,10.8)-9))
which(min(abs(c(0.782,8.6,10.8)-9)))
which.min(abs(c(0.782,8.6,10.8)-9)))
which.min(abs(c(0.782,8.6,10.8)-9))
which.min(abs(c(0.782,8.6,10.8)-2))
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
shiny::runApp(appDir="./app/")
load("app/.RData")
####################### RUN THE APP ############################
#load("app/.RData")
shiny::runApp(appDir="./app/")
