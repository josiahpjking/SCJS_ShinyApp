leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 7) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~colorNumeric("Reds", anycrime)(anycrime),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",pal="Reds",
values=~anycrime,title="Percentage Crime Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 7) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~colorNumeric("Reds", anycrime)(anycrime),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",pal="Reds",
values=~.bincode(anycrime),title="Percentage Crime Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 7) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~colorNumeric("Reds", anycrime)(anycrime),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",pal="Reds",
values=~.bincode(anycrime,breaks=5),title="Percentage Crime Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 7) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~colorNumeric("Reds", anycrime)(anycrime),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
output$pdiv_map <- renderLeaflet({
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 7) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~colorNumeric("Reds", anycrime)(anycrime),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",pal="Reds",
#values=~anycrime,title="Percentage Crime Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 7) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~colorNumeric("Reds", anycrime)(anycrime),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",pal="Reds",
#values=~anycrime,title="Percentage Crime Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 7) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~colorNumeric("Reds", anycrime)(anycrime),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal="Reds",values=~colorNumeric("Reds", anycrime)(anycrime)
title="Percentage Crime Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 7) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~colorNumeric("Reds", anycrime)(anycrime),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal="Reds",values=~colorNumeric("Reds", anycrime)(anycrime),
title="Percentage Crime Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 7) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~colorNumeric("Reds", anycrime)(anycrime),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal="Reds",values=~colorNumeric("Reds", anycrime),
title="Percentage Crime Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
?.bincode
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 7) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~colorNumeric("Reds", anycrime)(anycrime),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal="Reds",values=seq(0,30,5),
title="Percentage Crime Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 7) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~colorNumeric("Reds", anycrime)(anycrime),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal="Reds",values=factor(seq(0,30,5)),
title="Percentage Crime Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
pal=colorNumeric(
palette = "Reds",
domain=pd_latlon@data$anycrime
)
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 7) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~pal(anycrime),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal=pal,values=~anycrime,
title="Percentage Crime Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
pal=colorNumeric(
palette = "Reds",
domain=pd_latlon@data$anycrime
)
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 7) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~pal(anycrime),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal=pal,values=~anycrime,
title="Percentage Crime <br> Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 6) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~pal(anycrime),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal=pal,values=~anycrime,
title="Percentage Crime <br> Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
pal=colorNumeric(
palette = "Reds",
domain=pd_latlon@data$anycrime*pd_latlon@data$population
)
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 6) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~pal(anycrime*population),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal=pal,values=~anycrime*population,
title="Percentage Crime <br> Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
pal=colorNumeric(
palette = "Reds",
domain=pd_latlon@data$anycrime
)
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 7) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~pal(anycrime),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal=pal,values=~anycrime,
title="Percentage Crime <br> Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
runApp()
runApp()
runApp()
runApp()
runApp()
leaflet(pd_latlon) %>% setView(lng = -4.183, lat = 56.817, zoom = 7) %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,popup=~mytext,
fillColor = ~pal(anycrime),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addLegend("topright",
pal=pal,values=~anycrime,
title="Percentage Crime <br> Victimisation (2014/15)",
labFormat=labelFormat(suffix="%"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
div(id="home",
div(id="home-summary",
div(id="home-toptext",#class="toptext",
tags$p("The Scottish Crime and Justice Survey (SCJS) is a large-scale social survey which asks people about their experiences and perceptions of crime. The survey is important because it provides a picture of crime in Scotland, including crimes that haven't been reported to/recorded by the police and captured in police recorded crime statistics. This ShinyApp gives a breakdown of different elements of the SCJS by Police Divisions. When designing this app, we had in mind two main questions that users might have about responses to the survey:"),
div(class="questions",
tags$p("Which police divisions in Scotland are performing above and below the National Average, and have divisions been consistent in this respect over time?")),
div(class="questions",
tags$p("How is Scotland as a whole changing over time?")),
tags$p("The App features a number of different tools to meet these needs, which are detailed below. For information about the in-built statistical testing in these tools, and links to other SCJS publications, see the Help & Information tab.")
),
leafletOutput("pdiv_map")),
div(class="home_allbuttons",
actionLink("link_overview",
div(class="home-button",
div(class="button-head",
tags$img(src="overview.png"),
tags$h1("Overview")),
tags$p("Use the Overview tab to see how police divisions have been performing relative to the National Average. Choose between any of the Survey's 3 National Indicators or whole sections of the survey.")
)
),
actionLink("link_compare",
div(class="home-button",
div(class="button-head",
tags$img(src="comparison.png"),
tags$h1("Comparison Tool")),
tags$p("Use the comparison tool to look at the data in more depth: Pick and choose specific years and/or specific police divisions, and compare the results of the survey.")
)
),
actionLink("link_trends",
div(class="home-button",
div(class="button-head",
tags$img(src="trends.png"),
tags$h1("Trends Over Time")),
tags$p("Use the Trends tab to look at how specific questions in the SCJS have changed over time. These trends can also be disaggregated by division.")
)
),
actionLink("link_tables",
div(class="home-button",
div(class="button-head",
tags$img(src="tables.png"),
tags$h1("Tables")),
tags$p("If you don't like all the visual stuff and just want some numbers, then head to the Tables section. You can download tables of percentages and sample sizes for all variables included in this app.")
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?source
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
div(id="home",
div(id="home-toptext",
tags$p("The Scottish Crime and Justice Survey (SCJS) is a large-scale social survey which asks people about their experiences and perceptions of crime. The survey is important because it provides a picture of crime in Scotland, including crimes that haven't been reported to/recorded by the police and captured in police recorded crime statistics."),
tags$p("Here you can find various sections of the survey broken down by Police Divisions, with the aim of investigating two main questions that users might have about the SCJS data:"),
div(id="questions",
tags$p("Which police divisions in Scotland are performing above and below the National Average, and have divisions been consistent in this respect over time?"),
tags$p("How is Scotland as a whole changing over time?")
),
tags$p("There are a number of different tools designed to meet these needs, which are detailed below. For information about the in-built statistical testing in these tools, and links to other SCJS publications, see the Help & Information tab.")
),
leafletOutput("pdiv_map"),
div(class="home_allbuttons",
actionLink("link_overview",
div(class="home-button",
div(class="button-head",
tags$img(src="overview.png"),
tags$h1("Overview")),
tags$p("Use the Overview tab to see how police divisions have been performing relative to the National Average. Choose between any of the Survey's 3 National Indicators or whole sections of the survey.")
)
),
actionLink("link_compare",
div(class="home-button",
div(class="button-head",
tags$img(src="comparison.png"),
tags$h1("Comparison Tool")),
tags$p("Use the comparison tool to look at the data in more depth: Pick and choose specific years and/or specific police divisions, and compare the results of the survey.")
)
),
actionLink("link_trends",
div(class="home-button",
div(class="button-head",
tags$img(src="trends.png"),
tags$h1("Trends Over Time")),
tags$p("Use the Trends tab to look at how specific questions in the SCJS have changed over time. These trends can also be disaggregated by division.")
)
),
actionLink("link_tables",
div(class="home-button",
div(class="button-head",
tags$img(src="tables.png"),
tags$h1("Tables")),
tags$p("If you don't like all the visual stuff and just want some numbers, then head to the Tables section. You can download tables of percentages and sample sizes for all variables included in this app.")
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(leaflet)
runApp()
library(shiny)
library(leaflet)
library(plotly)
require(tidyr)
require(dplyr)
require(magrittr)
runApp()
df %>% filter(police_div=="National Average") %>% mutate(
nat_avgp = percentage,
nat_avgci = ci
) %>% select(variable,year,nat_avgp,nat_avgci) -> nat_avg
left_join(df, nat_avg) %>%
mutate(
p_diff=percentage-nat_avgp,
p_diff2=ifelse(reverse_coded==1,0-p_diff,p_diff),
p_direction=ifelse(p_diff2==0,"No difference",
ifelse(p_diff2>0,"More Positive","Less Positive")),
c=sqrt((ci^2)+(nat_avgci^2)),
change=ifelse(((abs(p_diff)/100)>c)==TRUE & p_direction=="More Positive","More Positive",
ifelse(((abs(p_diff)/100)>c)==TRUE & p_direction=="Less Positive","Less Positive","No difference")),
wrapped_name = sapply(name_trunc, FUN = function(x) {paste(strwrap(x, width = 35), collapse = "<br>")}),
my_text = paste0("<b>",police_div,"</b><br>",year,"<br>",wrapped_name,"<br><b>",round(percentage, digits=1),"</b>% +/-",round(ci*100, digits=1),", N = ",samplesize,"<br><i><b>Click to see this division relative<br>to the national average over time.<i></b>"),
my_text2 = paste0("<b>",year,"</b><br>",police_div,"<br>",wrapped_name,"<br><b>",round(percentage, digits=1),"</b>% +/-",round(ci*100, digits=1),", N = ",samplesize,"<br><i><b>Click to see this year<br>for all divisions.<i></b>"),
my_text3 = paste0(wrapped_name,"<br><b>",round(percentage, digits=1),"</b>% +/-",round(ci*100, digits=1),", N = ",samplesize)
) %>% select(-c(p_direction,c))
left_join(df, nat_avg) %>%
mutate(
p_diff=percentage-nat_avgp,
p_diff2=ifelse(reverse_coded==1,0-p_diff,p_diff),
p_direction=ifelse(p_diff2==0,"No difference",
ifelse(p_diff2>0,"More Positive","Less Positive")),
c=sqrt((ci^2)+(nat_avgci^2)),
change=ifelse(((abs(p_diff)/100)>c)==TRUE & p_direction=="More Positive","More Positive",
ifelse(((abs(p_diff)/100)>c)==TRUE & p_direction=="Less Positive","Less Positive","No difference")),
wrapped_name = sapply(name_trunc, FUN = function(x) {paste(strwrap(x, width = 35), collapse = "<br>")}),
my_text = paste0("<b>",police_div,"</b><br>",year,"<br>",wrapped_name,"<br><b>",round(percentage, digits=1),"</b>% +/-",round(ci*100, digits=1),", N = ",samplesize,"<br><i><b>Click to see this division relative<br>to the national average over time.<i></b>"),
my_text2 = paste0("<b>",year,"</b><br>",police_div,"<br>",wrapped_name,"<br><b>",round(percentage, digits=1),"</b>% +/-",round(ci*100, digits=1),", N = ",samplesize,"<br><i><b>Click to see this year<br>for all divisions.<i></b>"),
my_text3 = paste0(wrapped_name,"<br><b>",round(percentage, digits=1),"</b>% +/-",round(ci*100, digits=1),", N = ",samplesize)
) %>% select(-c(p_direction,c)) -> overview_data
iov_var=all_vars[[1]][1]
iov_year=years[5]
overview_data %>% filter(variable %in% iov_var) %>%
filter(year %in% iov_year) %>%
filter(police_div!="National Average") %>%
mutate(
wrappedpolice_div=sapply(gsub(" Division","",police_div), FUN = function(x) {paste(strwrap(x, width = 15), collapse = "<br>")})
) %>%
plot_ly(.,
x=~wrappedpolice_div,
y=~p_diff,
color=~change,
text=~my_text,
hoverinfo="text",
colors=overview_cols,
type="bar") %>% layout(title=paste0("<b>",input$ov_year,"</b><br>",paste(strwrap(input$ov_var, width = 75), collapse = "<br>")),
margin = list(t=70, b = 100),
showlegend=input$showleg,
height = input$plotHeight,
autosize=TRUE,
yaxis=list(title="Percentage Point Difference from<br>National Average",ticksuffix = "%"),
xaxis=list(title="",
tickangle=90,
categoryarray=~wrappedpolice_div[order(p_diff)],
categoryorder="array")
) %>% config(modeBarButtonsToRemove = modebar_remove)
overview_data %>% filter(variable %in% iov_var) %>%
filter(year %in% iov_year) %>%
filter(police_div!="National Average") %>%
mutate(
wrappedpolice_div=sapply(gsub(" Division","",police_div), FUN = function(x) {paste(strwrap(x, width = 15), collapse = "<br>")})
) %>%
plot_ly(.,
x=~wrappedpolice_div,
y=~p_diff,
color=~change,
text=~my_text,
hoverinfo="text",
colors=overview_cols,
type="bar") %>% layout(title=paste0("<b>",input$ov_year,"</b><br>",paste(strwrap(input$ov_var, width = 75), collapse = "<br>")),
margin = list(t=70, b = 100),
#showlegend=input$showleg,
#height = input$plotHeight,
autosize=TRUE,
yaxis=list(title="Percentage Point Difference from<br>National Average",ticksuffix = "%"),
xaxis=list(title="",
tickangle=90,
categoryarray=~wrappedpolice_div[order(p_diff)],
categoryorder="array")
) %>% config(modeBarButtonsToRemove = modebar_remove)
overview_data %>% filter(variable %in% iov_var) %>%
filter(year %in% iov_year) %>%
filter(police_div!="National Average") %>%
mutate(
wrappedpolice_div=sapply(gsub(" Division","",police_div), FUN = function(x) {paste(strwrap(x, width = 15), collapse = "<br>")})
) %>%
plot_ly(.,
x=~wrappedpolice_div,
y=~p_diff,
color=~change,
text=~my_text,
hoverinfo="text",
colors=overview_cols,
type="bar") %>% layout(#title=paste0("<b>",input$ov_year,"</b><br>",paste(strwrap(input$ov_var, width = 75), collapse = "<br>")),
margin = list(t=70, b = 100),
#showlegend=input$showleg,
#height = input$plotHeight,
autosize=TRUE,
yaxis=list(title="Percentage Point Difference from<br>National Average",ticksuffix = "%"),
xaxis=list(title="",
tickangle=90,
categoryarray=~wrappedpolice_div[order(p_diff)],
categoryorder="array")
) %>% config(modeBarButtonsToRemove = modebar_remove)
overview_data
overview_data %>% filter(variable %in% iov_var) %>%
filter(year %in% iov_year) %>%
filter(police_div!="National Average")
overview_data %>% filter(variable %in% iov_var) %>%
filter(year %in% iov_year) %>%
filter(police_div!="National Average") %>%
mutate(
wrappedpolice_div=sapply(gsub(" Division","",police_div), FUN = function(x) {paste(strwrap(x, width = 15), collapse = "<br>")})
)
overview_data %>% filter(variable %in% iov_var) %>%
filter(year %in% iov_year) %>%
filter(police_div!="National Average") %>%
mutate(
wrappedpolice_div=sapply(gsub(" Division","",police_div), FUN = function(x) {paste(strwrap(x, width = 15), collapse = "<br>")})
) %>% select(p_diff)
df<-df[!is.na(df$p),]
shiny::runApp()
library(shiny)
library(leaflet)
library(plotly)
require(tidyr)
require(dplyr)
require(magrittr)
runApp()
shiny::runApp()
library(leaflet)
runApp()
class(df)
df<-ungroup(df)
shiny::runApp()
library(leaflet)
runApp()
runApp()
runApp()
